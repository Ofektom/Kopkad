version: "3.8"

services:
  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: ofektom-redis
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - ofektom-network

  # Backend API Service (Instance 1)
  backend-1:
    build:
      context: .
      dockerfile: dockerfile
    container_name: ofektom-backend-1
    ports:
      - "8001:8001"
    environment:
      - PORT=8001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - ofektom-network

  # Backend API Service (Instance 2)
  backend-2:
    build:
      context: .
      dockerfile: dockerfile
    container_name: ofektom-backend-2
    ports:
      - "8002:8002"
    environment:
      - PORT=8002
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - ofektom-network

  # Backend API Service (Instance 3)
  backend-3:
    build:
      context: .
      dockerfile: dockerfile
    container_name: ofektom-backend-3
    ports:
      - "8003:8003"
    environment:
      - PORT=8003
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - ofektom-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ofektom-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - ofektom-network

volumes:
  redis_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  ofektom-network:
    driver: bridge
